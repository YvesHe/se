线程同步详解:

"同步静态方法"的锁的对象是该类的字节码:   类.class  
"同步普通方法"的锁的对象是  能调用该方法的对象.也就是调用该方法的实例对象.


"同步代码块"的锁的对象   程序员可以自行指定:

如果是
synchronized (该类.class)   则与该类中的 "同步静态方法"的锁的对象相同,也就是共用同样的锁.
synchronized (this)                 则与该类中的"同步普通方法"的锁的对象相同,也就是共用同样的锁.



搞清楚synchronized锁定的是哪个对象，就能帮助我们设计更安全的多线程程序。
还有一些技巧可以让我们对共享资源的同步访问更加安全：
1． 定义private 的instance变量+它的 get方法，而不要定义public/protected的instance变量。如果将变量定义为public，对象在外界可以
绕过同步方法的控制而直接取得它，并改动它。这也是JavaBean的标准实现方式之一。
2． 如果instance变量是一个对象，如数组或ArrayList什么的，那上述方法仍然不安全，因为当外界对象通过get方法拿到这个instance对象
的引用后，又将其指向另一个对象，那么这个private变量也就变了，岂不是很危险。 这个时候就需要将get方法也加上synchronized同步，并
且，只返回这个private对象的clone()――这样，调用端得到的就是对象副本的引用了